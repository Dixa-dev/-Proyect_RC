// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user")
}

model TravelGuide {
  id          Int          @id @default(autoincrement())
  Address     Addressee?
  consignment Consignment?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("travel_guide")
}

model LoadOrder {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("load_order")
}

model Driver {
  id                   Int      @id @default(autoincrement())
  patent               String
  brand                String
  model                String
  year                 Int
  numberChassis        String
  trackerBrand         String
  numberPermission     String
  expirationPermission String
  policyNumber         String
  policyExpiration     String
  nameOwner            String
  phoneOwner           String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@map("driver")
}

model Truck {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("truck")
}

model Trailer {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("trailer")
}

model Transport {
  id                   Int                @id @default(autoincrement())
  name                 String
  address              String
  country              String
  numberPemission      String
  expirationPermission String
  numberPolicy         String
  expirationPolicy     String
  nameRepresentative   String
  phoneRepresentative  String
  emailRepresentative  String
  nameResponsible      String
  phoneResponsible     String
  emailResponsible     String
  proxy                String
  referencePerson      String
  factura              FacturaProveedor[]
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  @@map("transport")
}

model Addressee {
  id          Int      @id @default(autoincrement())
  name        String
  address     String
  nacionality String
  email       String
  cuil        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  travelGuide  TravelGuide @relation(fields: [tavelGuideId], references: [id], onDelete: Cascade)
  tavelGuideId Int         @unique

  @@map("addressee")
}

model Consignment {
  id          Int      @id @default(autoincrement())
  name        String
  address     String
  nacionality String
  email       String
  cuil        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tavelGuide   TravelGuide @relation(fields: [tavelGuideId], references: [id], onDelete: Cascade)
  tavelGuideId Int         @unique

  @@map("consignment")
}

model OrderGuide {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_guide")
}

//Administracion

model Client {
  id        Int                     @id @default(autoincrement())
  name      String
  celular   String
  email     String
  factura   ClienteFacturaCliente[]
  createdAt DateTime                @default(now())
  updatedAt DateTime                @updatedAt

  @@map("client")
}

model Presupuesto {
  id         Int      @id @default(autoincrement())
  name       String
  cotizacion Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("presupuesto")
}

model ClienteFacturaCliente {
  id               Int            @id @default(autoincrement())
  name             String
  valor            Float
  clientId         Int
  client           Client         @relation(fields: [clientId], references: [id], onDelete: Cascade)
  facturaClienteId Int
  facturaCliente   FacturaCliente @relation(fields: [facturaClienteId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cliente_factura_cliente")
}

model FacturaCliente {
  id              Int                     @id @default(autoincrement())
  name            String
  valor           Float
  efectivo        Float
  cheque          Float
  dolar           Float
  cotizacionDolar Float
  estado          String
  cliente         ClienteFacturaCliente[]
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt

  @@map("factura_cliente")
}

model reciboCobranzaCliente {
  id        Int      @id @default(autoincrement())
  name      String
  valor     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("factura_proveedor")
}

model FacturaProveedor {
  id          Int       @id @default(autoincrement())
  name        String
  valorViaje  Float
  transportId Int
  transport   Transport @relation(fields: [transportId], references: [id], onDelete: Cascade)

  estado    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("proveedor")
}

model ReciboCobranzaProveedor {
  id        Int      @id @default(autoincrement())
  name      String
  valor     Float
  estado    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("recibo_cobranza_proveedor")
}

model OrdenPagoProveedor {
  id        Int      @id @default(autoincrement())
  name      String
  valor     Float
  estado    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orden_pago_proveedor")
}
